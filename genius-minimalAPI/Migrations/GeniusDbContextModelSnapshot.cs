// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using genius_minimalAPI.Infrastructure;

#nullable disable

namespace geniusminimalAPI.Migrations
{
    [DbContext(typeof(GeniusDbContext))]
    partial class GeniusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Annotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("FirstSymbol")
                        .HasColumnType("int")
                        .HasColumnName("first_symbol");

                    b.Property<int>("LastSymbol")
                        .HasColumnType("int")
                        .HasColumnName("last_symbol");

                    b.Property<int>("LyricsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LyricsId");

                    b.ToTable("annotations", (string)null);
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Lyrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackId")
                        .IsUnique();

                    b.ToTable("lyrics", (string)null);
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Musician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("info");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("musicians", (string)null);
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imagePath");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("MusicianId");

                    b.ToTable("releases", (string)null);
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LyricsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseId");

                    b.ToTable("tracks", (string)null);
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Annotation", b =>
                {
                    b.HasOne("genius_minimalAPI.Domain.Entities.Lyrics", "Lyrics")
                        .WithMany("Annotations")
                        .HasForeignKey("LyricsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lyrics");
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Lyrics", b =>
                {
                    b.HasOne("genius_minimalAPI.Domain.Entities.Track", "Track")
                        .WithOne("Lyrics")
                        .HasForeignKey("genius_minimalAPI.Domain.Entities.Lyrics", "TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Release", b =>
                {
                    b.HasOne("genius_minimalAPI.Domain.Entities.Musician", "Musician")
                        .WithMany("Releases")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Track", b =>
                {
                    b.HasOne("genius_minimalAPI.Domain.Entities.Release", "Release")
                        .WithMany("Tracks")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Release");
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Lyrics", b =>
                {
                    b.Navigation("Annotations");
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Musician", b =>
                {
                    b.Navigation("Releases");
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Release", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("genius_minimalAPI.Domain.Entities.Track", b =>
                {
                    b.Navigation("Lyrics");
                });
#pragma warning restore 612, 618
        }
    }
}
